// <auto-generated />
using System;
using ClinicalLaboratory.Persistence.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ClinicalLaboratory.Persistence.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ClinicalLaboratory.Domain.Entities.Analysis", b =>
                {
                    b.Property<int>("AnalysisId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("AnalysisId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AnalysisId"));

                    b.Property<DateTime>("AuditCreateDate")
                        .HasColumnType("datetime2(7)")
                        .HasColumnName("AuditCreateDate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar")
                        .HasColumnName("Name");

                    b.Property<int>("State")
                        .HasColumnType("int")
                        .HasColumnName("State");

                    b.HasKey("AnalysisId");

                    b.ToTable("Analysis", (string)null);

                    b.HasData(
                        new
                        {
                            AnalysisId = 1,
                            AuditCreateDate = new DateTime(2023, 5, 9, 22, 3, 10, 196, DateTimeKind.Local).AddTicks(9497),
                            Name = "PSA",
                            State = 1
                        },
                        new
                        {
                            AnalysisId = 2,
                            AuditCreateDate = new DateTime(2023, 5, 9, 22, 3, 10, 196, DateTimeKind.Local).AddTicks(9515),
                            Name = "Hemograma",
                            State = 1
                        });
                });

            modelBuilder.Entity("ClinicalLaboratory.Domain.Entities.Role", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "537ce8a5-fb65-43fe-b1ab-75b3280476d6",
                            Name = "admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "f71e63c0-56cb-4378-b763-4a24bd8ba377",
                            Name = "patient",
                            NormalizedName = "PATIENT"
                        });
                });

            modelBuilder.Entity("ClinicalLaboratory.Domain.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "b130e6bd-72e6-40c9-b409-5b62586826e5",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "63173829-b1a8-4ec1-add0-54aabfe1483e",
                            Email = "admin@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Ovidio",
                            LastName = "Romero",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@GMAIL.COM",
                            NormalizedUserName = "ADMIN@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEDXC/NoR81h/zibGO9pJB36eeLfXsQU6cRx6gvZzpQ+zwACerE2HLMnI/yAH65rf7w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0dbb240c-5d5d-4819-b0ad-d24cfa6358bf",
                            TwoFactorEnabled = false,
                            UserName = "admin@gmail.com"
                        },
                        new
                        {
                            Id = "97e804a8-ca9a-4f49-a251-a4baa9f437a8",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4f7a5f48-39a1-4717-9043-37166328019b",
                            Email = "pepito@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Pepito",
                            LastName = "Perez",
                            LockoutEnabled = false,
                            NormalizedEmail = "PEPITO@GMAIL.COM",
                            NormalizedUserName = "PEPITO@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEBBfIlSQ+BXOAT9jEy79OVHst3V9P7KyAyuniSiaTYQ728n3u+vneE0uIvO53Nu6DA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1b650cd5-7c3b-4d61-8498-758a464697a0",
                            TwoFactorEnabled = false,
                            UserName = "pepito@gmail.com"
                        },
                        new
                        {
                            Id = "4da5c7f8-c907-4037-8286-8e94fea938a0",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8964f475-dc16-4fe0-b92a-6d9428eb6e17",
                            Email = "juanita@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Juanita",
                            LastName = "Jimenez",
                            LockoutEnabled = false,
                            NormalizedEmail = "JUANITA@GMAIL.COM",
                            NormalizedUserName = "JUANITA@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEOqYZL/b0qiFuDws9pMm5RI3TFvvZ8MDb4Q2xc4PKnWQeNSm3I3YBf+2S/wiVl1v9Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "94e96db0-da38-44e1-a29f-ed9fcc12235e",
                            TwoFactorEnabled = false,
                            UserName = "juanita@gmail.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "b130e6bd-72e6-40c9-b409-5b62586826e5",
                            RoleId = "537ce8a5-fb65-43fe-b1ab-75b3280476d6"
                        },
                        new
                        {
                            UserId = "97e804a8-ca9a-4f49-a251-a4baa9f437a8",
                            RoleId = "f71e63c0-56cb-4378-b763-4a24bd8ba377"
                        },
                        new
                        {
                            UserId = "4da5c7f8-c907-4037-8286-8e94fea938a0",
                            RoleId = "f71e63c0-56cb-4378-b763-4a24bd8ba377"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("ClinicalLaboratory.Domain.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ClinicalLaboratory.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ClinicalLaboratory.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("ClinicalLaboratory.Domain.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClinicalLaboratory.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ClinicalLaboratory.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
